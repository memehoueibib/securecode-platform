import { supabase, LearningProgress, Achievement } from '../lib/supabase';
import { AdminSyncService } from './adminSyncService';
import { LearningModule } from '../types/admin';

export class LearningService {
  static async getUserProgress(userId: string): Promise<LearningProgress[]> {
    try {
      const { data, error } = await supabase
        .from('learning_progress')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Erreur lors de la r√©cup√©ration de la progression:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la progression:', error);
      return [];
    }
  }

  static async updateModuleProgress(
    userId: string,
    moduleId: string,
    moduleNom: string,
    progression: number,
    termine: boolean = false
  ): Promise<boolean> {
    try {
      const pointsGagnes = termine ? 50 : Math.floor(progression / 10);

      const { error } = await supabase
        .from('learning_progress')
        .upsert({
          user_id: userId,
          module_id: moduleId,
          module_nom: moduleNom,
          progression,
          termine,
          points_gagnes: pointsGagnes,
          updated_at: new Date().toISOString()
        });

      if (error) {
        console.error('Erreur lors de la mise √† jour de la progression:', error);
        return false;
      }

      // Mettre √† jour les points utilisateur
      if (pointsGagnes > 0) {
        await this.updateUserPoints(userId, pointsGagnes);
      }

      // V√©rifier les r√©alisations
      if (termine) {
        await this.checkAchievements(userId);
      }

      return true;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de la progression:', error);
      return false;
    }
  }

  static async getUserAchievements(userId: string): Promise<Achievement[]> {
    try {
      const { data, error } = await supabase
        .from('achievements')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Erreur lors de la r√©cup√©ration des r√©alisations:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des r√©alisations:', error);
      return [];
    }
  }

  // R√©cup√©rer tous les modules d'apprentissage disponibles
  static async getAllLearningModules(): Promise<LearningModule[]> {
    try {
      // Utiliser des modules par d√©faut au lieu de charger depuis la base de donn√©es
      // pour √©viter les erreurs de relation dans Supabase
      return this.getDefaultModules();
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des modules d\'apprentissage:', error);
      return [];
    }
  }

  // Modules par d√©faut pour √©viter les erreurs de chargement depuis Supabase
  static getDefaultModules(): LearningModule[] {
    return [
      {
        id: 'module-xss',
        title: 'Vuln√©rabilit√©s XSS',
        description: 'Comprendre et pr√©venir les attaques Cross-Site Scripting',
        content: {
          lessons: [
            {
              title: 'Introduction aux XSS',
              content: 'Les attaques XSS (Cross-Site Scripting) permettent √† un attaquant d\'injecter du code JavaScript malveillant qui s\'ex√©cute dans le navigateur des utilisateurs. Ces attaques peuvent voler des cookies, des jetons de session ou d\'autres informations sensibles.',
              codeExample: {
                vulnerable: 'document.getElementById("output").innerHTML = userInput;',
                secure: 'document.getElementById("output").textContent = userInput;'
              },
              quiz: {
                question: 'Quelle m√©thode est la plus s√ªre pour afficher du contenu utilisateur dans le DOM ?',
                options: ['innerHTML', 'textContent', 'outerHTML', 'insertAdjacentHTML'],
                correct: 1
              }
            }
          ]
        },
        difficulty: 'beginner',
        estimatedDuration: 30,
        status: 'published'
      },
      {
        id: 'module-injection',
        title: 'Injection de Code',
        description: 'Comprendre les risques li√©s √† l\'injection de code et comment les √©viter',
        content: {
          lessons: [
            {
              title: 'Dangers de eval()',
              content: 'La fonction eval() ex√©cute du code JavaScript arbitraire, ce qui peut √™tre extr√™mement dangereux si elle est utilis√©e avec des entr√©es utilisateur non valid√©es.',
              codeExample: {
                vulnerable: 'eval("console.log(" + userInput + ")");',
                secure: 'console.log(JSON.parse(userInput));'
              },
              quiz: {
                question: 'Quelle alternative s√©curis√©e peut-on utiliser √† la place de eval() pour parser du JSON ?',
                options: ['JSON.eval()', 'JSON.parse()', 'Function()', 'new Function()'],
                correct: 1
              }
            }
          ]
        },
        difficulty: 'intermediate',
        estimatedDuration: 45,
        status: 'published'
      },
      {
        id: 'module-secrets',
        title: 'Gestion des Secrets',
        description: 'Bonnes pratiques pour g√©rer les mots de passe et cl√©s API',
        content: {
          lessons: [
            {
              title: 'Secrets dans le code',
              content: 'Stocker des secrets (mots de passe, cl√©s API, jetons) directement dans le code source est une mauvaise pratique de s√©curit√©. Ces informations peuvent √™tre expos√©es si le code est partag√© ou si le d√©p√¥t est public.',
              codeExample: {
                vulnerable: 'const apiKey = "sk_test_abcdef123456";',
                secure: 'const apiKey = process.env.API_KEY;'
              },
              quiz: {
                question: 'Quelle est la meilleure fa√ßon de g√©rer les secrets dans une application ?',
                options: ['Les coder en dur dans le code source', 'Les stocker dans un fichier de configuration public', 'Utiliser des variables d\'environnement', 'Les commenter dans le code'],
                correct: 2
              }
            }
          ]
        },
        difficulty: 'beginner',
        estimatedDuration: 25,
        status: 'published'
      }
    ];
  }

  // R√©cup√©rer un module d'apprentissage sp√©cifique
  static async getLearningModule(moduleId: string): Promise<LearningModule | null> {
    try {
      const modules = this.getDefaultModules();
      return modules.find(module => module.id === moduleId) || null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du module d\'apprentissage:', error);
      return null;
    }
  }

  private static async updateUserPoints(userId: string, pointsGagnes: number): Promise<void> {
    try {
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('points')
        .eq('id', userId)
        .single();

      if (profileError) {
        console.error('Erreur lors de la r√©cup√©ration du profil:', profileError);
        return;
      }

      const { error: updateError } = await supabase
        .from('profiles')
        .update({
          points: profile.points + pointsGagnes,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId);

      if (updateError) {
        console.error('Erreur lors de la mise √† jour des points:', updateError);
      }
    } catch (error) {
      console.error('Erreur lors de la mise √† jour des points:', error);
    }
  }

  private static async checkAchievements(userId: string): Promise<void> {
    try {
      // R√©cup√©rer la progression actuelle
      const progress = await this.getUserProgress(userId);
      const completedModules = progress.filter(p => p.termine).length;

      // D√©finir les r√©alisations possibles
      const possibleAchievements = [
        {
          achievement_id: 'first-module',
          nom: 'Premier Module',
          description: 'Terminer votre premier module d\'apprentissage',
          icone: 'üéì',
          condition: completedModules >= 1
        },
        {
          achievement_id: 'security-student',
          nom: '√âtudiant en S√©curit√©',
          description: 'Terminer 3 modules d\'apprentissage',
          icone: 'üìö',
          condition: completedModules >= 3
        },
        {
          achievement_id: 'security-expert',
          nom: 'Expert en S√©curit√©',
          description: 'Terminer tous les modules disponibles',
          icone: 'üèÜ',
          condition: completedModules >= 5
        }
      ];

      // V√©rifier et d√©bloquer les r√©alisations
      for (const achievement of possibleAchievements) {
        if (achievement.condition) {
          await supabase
            .from('achievements')
            .upsert({
              user_id: userId,
              achievement_id: achievement.achievement_id,
              nom: achievement.nom,
              description: achievement.description,
              icone: achievement.icone,
              debloque: true,
              date_deblocage: new Date().toISOString()
            });
        }
      }
    } catch (error) {
      console.error('Erreur lors de la v√©rification des r√©alisations:', error);
    }
  }
}