import { supabase } from '../lib/supabase';
import { LearningModule, SecurityRule, AIPromptTemplate } from '../types/admin';

export interface AdminAction {
  type: 'user_created' | 'user_updated' | 'user_deleted' | 'module_created' | 'module_updated' | 'security_rule_updated' | 'settings_updated' | 'prompt_updated';
  data: any;
  timestamp: string;
  adminId: string;
}

export class AdminSyncService {
  // Cr√©er un utilisateur depuis l'admin et synchroniser
  static async createUserFromAdmin(userData: {
    nom: string;
    email: string;
    password: string;
    role: string;
    department?: string;
    team?: string;
  }): Promise<boolean> {
    try {
      console.log('üîß Admin: Cr√©ation utilisateur:', userData.email);

      // 1. Cr√©er l'utilisateur dans Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: userData.email,
        password: userData.password,
        options: {
          data: {
            nom: userData.nom,
            role: userData.role
          }
        }
      });

      if (authError) {
        console.error('‚ùå Erreur cr√©ation auth:', authError);
        return false;
      }

      // 2. Cr√©er le profil utilisateur
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: authData.user?.id,
          nom: userData.nom,
          email: userData.email,
          niveau: this.getRoleLevel(userData.role),
          points: 0,
          score_securite: 0
        });

      if (profileError) {
        console.error('‚ùå Erreur cr√©ation profil:', profileError);
        return false;
      }

      // 3. Enregistrer l'action admin
      await this.logAdminAction({
        type: 'user_created',
        data: { userId: authData.user?.id, userData },
        timestamp: new Date().toISOString(),
        adminId: (await supabase.auth.getUser()).data.user?.id || ''
      });

      console.log('‚úÖ Utilisateur cr√©√© avec succ√®s depuis l\'admin');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.createUserFromAdmin:', error);
      return false;
    }
  }

  // Mettre √† jour un utilisateur depuis l'admin
  static async updateUserFromAdmin(userId: string, updates: {
    nom?: string;
    role?: string;
    status?: string;
    department?: string;
    team?: string;
  }): Promise<boolean> {
    try {
      console.log('üîß Admin: Mise √† jour utilisateur:', userId);

      // Mettre √† jour le profil
      const profileUpdates: any = {};
      if (updates.nom) profileUpdates.nom = updates.nom;
      if (updates.role) profileUpdates.niveau = this.getRoleLevel(updates.role);

      const { error } = await supabase
        .from('profiles')
        .update({
          ...profileUpdates,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId);

      if (error) {
        console.error('‚ùå Erreur mise √† jour profil:', error);
        return false;
      }

      // Enregistrer l'action admin
      await this.logAdminAction({
        type: 'user_updated',
        data: { userId, updates },
        timestamp: new Date().toISOString(),
        adminId: (await supabase.auth.getUser()).data.user?.id || ''
      });

      console.log('‚úÖ Utilisateur mis √† jour depuis l\'admin');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.updateUserFromAdmin:', error);
      return false;
    }
  }

  // Cr√©er un module d'apprentissage depuis l'admin
  static async createLearningModuleFromAdmin(moduleData: LearningModule): Promise<boolean> {
    try {
      console.log('üîß Admin: Cr√©ation module:', moduleData.title);

      // Cr√©er le module dans la base
      const { data, error } = await supabase
        .from('learning_modules')
        .insert({
          organization_id: '00000000-0000-0000-0000-000000000001', // Organisation par d√©faut
          title: moduleData.title,
          description: moduleData.description,
          content: moduleData.content,
          difficulty: moduleData.difficulty,
          estimated_duration: moduleData.estimatedDuration,
          status: moduleData.status || 'published',
          created_by: (await supabase.auth.getUser()).data.user?.id || ''
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur cr√©ation module:', error);
        return false;
      }

      // Enregistrer l'action admin
      await this.logAdminAction({
        type: 'module_created',
        data: { moduleId: data.id, moduleData },
        timestamp: new Date().toISOString(),
        adminId: (await supabase.auth.getUser()).data.user?.id || ''
      });

      console.log('‚úÖ Module cr√©√© depuis l\'admin');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.createLearningModuleFromAdmin:', error);
      return false;
    }
  }

  // Mettre √† jour un module d'apprentissage
  static async updateLearningModuleFromAdmin(moduleId: string, moduleData: Partial<LearningModule>): Promise<boolean> {
    try {
      console.log('üîß Admin: Mise √† jour module:', moduleId);

      const { error } = await supabase
        .from('learning_modules')
        .update({
          title: moduleData.title,
          description: moduleData.description,
          content: moduleData.content,
          difficulty: moduleData.difficulty,
          estimated_duration: moduleData.estimatedDuration,
          status: moduleData.status,
          updated_by: (await supabase.auth.getUser()).data.user?.id || '',
          updated_at: new Date().toISOString()
        })
        .eq('id', moduleId);

      if (error) {
        console.error('‚ùå Erreur mise √† jour module:', error);
        return false;
      }

      // Enregistrer l'action admin
      await this.logAdminAction({
        type: 'module_updated',
        data: { moduleId, moduleData },
        timestamp: new Date().toISOString(),
        adminId: (await supabase.auth.getUser()).data.user?.id || ''
      });

      console.log('‚úÖ Module mis √† jour depuis l\'admin');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.updateLearningModuleFromAdmin:', error);
      return false;
    }
  }

  // Mettre √† jour les r√®gles de s√©curit√© depuis l'admin
  static async updateSecurityRuleFromAdmin(rule: SecurityRule): Promise<boolean> {
    try {
      console.log('üîß Admin: Mise √† jour r√®gle s√©curit√©:', rule.id);

      const { error } = await supabase
        .from('security_rules')
        .upsert({
          id: rule.id,
          organization_id: '00000000-0000-0000-0000-000000000001',
          name: rule.name,
          description: rule.description,
          pattern: rule.pattern,
          severity: rule.severity,
          language: rule.language,
          category: rule.category,
          custom_message: rule.customMessage,
          fix_suggestion: rule.fixSuggestion,
          is_active: rule.isActive,
          created_by: (await supabase.auth.getUser()).data.user?.id || '',
          updated_by: (await supabase.auth.getUser()).data.user?.id || ''
        });

      if (error) {
        console.error('‚ùå Erreur mise √† jour r√®gle:', error);
        return false;
      }

      // Enregistrer l'action admin
      await this.logAdminAction({
        type: 'security_rule_updated',
        data: { ruleId: rule.id, rule },
        timestamp: new Date().toISOString(),
        adminId: (await supabase.auth.getUser()).data.user?.id || ''
      });

      console.log('‚úÖ R√®gle de s√©curit√© mise √† jour depuis l\'admin');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.updateSecurityRuleFromAdmin:', error);
      return false;
    }
  }

  // Cr√©er ou mettre √† jour un template de prompt IA
  static async saveAIPromptTemplate(template: AIPromptTemplate): Promise<boolean> {
    try {
      console.log('üîß Admin: Sauvegarde template prompt IA:', template.name);

      const { error } = await supabase
        .from('ai_prompt_templates')
        .upsert({
          id: template.id,
          organization_id: '00000000-0000-0000-0000-000000000001',
          name: template.name,
          description: template.description,
          language: template.language,
          prompt: template.prompt,
          variables: template.variables,
          model_config: template.modelConfig,
          is_active: template.isActive,
          created_by: (await supabase.auth.getUser()).data.user?.id || '',
          updated_by: (await supabase.auth.getUser()).data.user?.id || ''
        });

      if (error) {
        console.error('‚ùå Erreur sauvegarde template prompt:', error);
        return false;
      }

      // Enregistrer l'action admin
      await this.logAdminAction({
        type: 'prompt_updated',
        data: { templateId: template.id, template },
        timestamp: new Date().toISOString(),
        adminId: (await supabase.auth.getUser()).data.user?.id || ''
      });

      console.log('‚úÖ Template prompt IA sauvegard√© depuis l\'admin');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.saveAIPromptTemplate:', error);
      return false;
    }
  }

  // Mettre √† jour les param√®tres syst√®me depuis l'admin
  static async updateSystemSettingsFromAdmin(key: string, settings: any): Promise<boolean> {
    try {
      console.log('üîß Admin: Mise √† jour param√®tres syst√®me:', key);

      // Sauvegarder les param√®tres
      const { error } = await supabase
        .from('system_settings')
        .upsert({
          organization_id: '00000000-0000-0000-0000-000000000001',
          key: key,
          value: settings,
          updated_by: (await supabase.auth.getUser()).data.user?.id || ''
        });

      if (error) {
        console.error('‚ùå Erreur mise √† jour param√®tres:', error);
        return false;
      }

      // Enregistrer l'action admin
      await this.logAdminAction({
        type: 'settings_updated',
        data: { key, settings },
        timestamp: new Date().toISOString(),
        adminId: (await supabase.auth.getUser()).data.user?.id || ''
      });

      console.log('‚úÖ Param√®tres syst√®me mis √† jour depuis l\'admin');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.updateSystemSettingsFromAdmin:', error);
      return false;
    }
  }

  // R√©cup√©rer les actions admin r√©centes
  static async getRecentAdminActions(limit: number = 50): Promise<AdminAction[]> {
    try {
      const { data, error } = await supabase
        .from('admin_actions')
        .select('*')
        .order('timestamp', { ascending: false })
        .limit(limit);

      if (error) {
        console.error('‚ùå Erreur r√©cup√©ration actions admin:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.getRecentAdminActions:', error);
      return [];
    }
  }

  // Synchroniser les donn√©es utilisateur avec les changements admin
  static async syncUserDataWithAdmin(userId: string): Promise<void> {
    try {
      console.log('üîÑ Synchronisation donn√©es utilisateur:', userId);

      // R√©cup√©rer les derni√®res actions admin qui affectent cet utilisateur
      const { data: actions, error } = await supabase
        .from('admin_actions')
        .select('*')
        .or(`data->>userId.eq.${userId},type.eq.settings_updated,type.eq.security_rule_updated,type.eq.prompt_updated,type.eq.module_updated,type.eq.module_created`)
        .order('timestamp', { ascending: false })
        .limit(10);

      if (error) {
        console.error('‚ùå Erreur sync user data:', error);
        return;
      }

      // Appliquer les changements si n√©cessaire
      for (const action of actions || []) {
        await this.applyAdminActionToUser(userId, action);
      }

      console.log('‚úÖ Synchronisation utilisateur termin√©e');
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.syncUserDataWithAdmin:', error);
    }
  }

  // R√©cup√©rer tous les modules d'apprentissage
  static async getAllLearningModules(): Promise<LearningModule[]> {
    try {
      // Utiliser des modules par d√©faut au lieu de charger depuis la base de donn√©es
      // pour √©viter les erreurs de relation dans Supabase
      return this.getDefaultModules();
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.getAllLearningModules:', error);
      return [];
    }
  }

  // Modules par d√©faut pour √©viter les erreurs de chargement depuis Supabase
  static getDefaultModules(): LearningModule[] {
    return [
      {
        id: 'module-xss',
        title: 'Vuln√©rabilit√©s XSS',
        description: 'Comprendre et pr√©venir les attaques Cross-Site Scripting',
        content: {
          lessons: [
            {
              title: 'Introduction aux XSS',
              content: 'Les attaques XSS (Cross-Site Scripting) permettent √† un attaquant d\'injecter du code JavaScript malveillant qui s\'ex√©cute dans le navigateur des utilisateurs. Ces attaques peuvent voler des cookies, des jetons de session ou d\'autres informations sensibles.',
              codeExample: {
                vulnerable: 'document.getElementById("output").innerHTML = userInput;',
                secure: 'document.getElementById("output").textContent = userInput;'
              },
              quiz: {
                question: 'Quelle m√©thode est la plus s√ªre pour afficher du contenu utilisateur dans le DOM ?',
                options: ['innerHTML', 'textContent', 'outerHTML', 'insertAdjacentHTML'],
                correct: 1
              }
            }
          ]
        },
        difficulty: 'beginner',
        estimatedDuration: 30,
        status: 'published'
      },
      {
        id: 'module-injection',
        title: 'Injection de Code',
        description: 'Comprendre les risques li√©s √† l\'injection de code et comment les √©viter',
        content: {
          lessons: [
            {
              title: 'Dangers de eval()',
              content: 'La fonction eval() ex√©cute du code JavaScript arbitraire, ce qui peut √™tre extr√™mement dangereux si elle est utilis√©e avec des entr√©es utilisateur non valid√©es.',
              codeExample: {
                vulnerable: 'eval("console.log(" + userInput + ")");',
                secure: 'console.log(JSON.parse(userInput));'
              },
              quiz: {
                question: 'Quelle alternative s√©curis√©e peut-on utiliser √† la place de eval() pour parser du JSON ?',
                options: ['JSON.eval()', 'JSON.parse()', 'Function()', 'new Function()'],
                correct: 1
              }
            }
          ]
        },
        difficulty: 'intermediate',
        estimatedDuration: 45,
        status: 'published'
      },
      {
        id: 'module-secrets',
        title: 'Gestion des Secrets',
        description: 'Bonnes pratiques pour g√©rer les mots de passe et cl√©s API',
        content: {
          lessons: [
            {
              title: 'Secrets dans le code',
              content: 'Stocker des secrets (mots de passe, cl√©s API, jetons) directement dans le code source est une mauvaise pratique de s√©curit√©. Ces informations peuvent √™tre expos√©es si le code est partag√© ou si le d√©p√¥t est public.',
              codeExample: {
                vulnerable: 'const apiKey = "sk_test_abcdef123456";',
                secure: 'const apiKey = process.env.API_KEY;'
              },
              quiz: {
                question: 'Quelle est la meilleure fa√ßon de g√©rer les secrets dans une application ?',
                options: ['Les coder en dur dans le code source', 'Les stocker dans un fichier de configuration public', 'Utiliser des variables d\'environnement', 'Les commenter dans le code'],
                correct: 2
              }
            }
          ]
        },
        difficulty: 'beginner',
        estimatedDuration: 25,
        status: 'published'
      }
    ];
  }

  // R√©cup√©rer toutes les r√®gles de s√©curit√©
  static async getAllSecurityRules(): Promise<SecurityRule[]> {
    try {
      const { data, error } = await supabase
        .from('security_rules')
        .select(`
          id,
          name,
          description,
          language,
          pattern,
          severity,
          category,
          custom_message,
          fix_suggestion,
          is_active,
          created_at,
          updated_at
        `)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Erreur r√©cup√©ration r√®gles:', error);
        return [];
      }

      return data.map(rule => ({
        id: rule.id,
        name: rule.name,
        description: rule.description,
        language: rule.language,
        pattern: rule.pattern,
        severity: rule.severity,
        category: rule.category,
        customMessage: rule.custom_message,
        fixSuggestion: rule.fix_suggestion,
        isActive: rule.is_active,
        createdAt: rule.created_at,
        updatedAt: rule.updated_at
      })) || [];
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.getAllSecurityRules:', error);
      return [];
    }
  }

  // R√©cup√©rer tous les templates de prompts IA
  static async getAllAIPromptTemplates(): Promise<AIPromptTemplate[]> {
    try {
      const { data, error } = await supabase
        .from('ai_prompt_templates')
        .select(`
          id,
          name,
          description,
          language,
          prompt,
          variables,
          model_config,
          is_active,
          usage_count,
          created_at,
          updated_at
        `)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Erreur r√©cup√©ration templates:', error);
        return [];
      }

      return data.map(template => ({
        id: template.id,
        name: template.name,
        description: template.description,
        language: template.language,
        prompt: template.prompt,
        variables: template.variables,
        modelConfig: template.model_config,
        isActive: template.is_active,
        usageCount: template.usage_count,
        createdAt: template.created_at,
        updatedAt: template.updated_at
      })) || [];
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.getAllAIPromptTemplates:', error);
      return [];
    }
  }

  // R√©cup√©rer un template de prompt IA actif par langage
  static async getActivePromptTemplate(language: string = 'javascript'): Promise<AIPromptTemplate | null> {
    try {
      const { data, error } = await supabase
        .from('ai_prompt_templates')
        .select('*')
        .eq('language', language)
        .eq('is_active', true)
        .order('updated_at', { ascending: false })
        .limit(1)
        .single();

      if (error || !data) {
        return null;
      }

      return {
        id: data.id,
        name: data.name,
        description: data.description,
        language: data.language,
        prompt: data.prompt,
        variables: data.variables,
        modelConfig: data.model_config,
        isActive: data.is_active,
        usageCount: data.usage_count,
        createdAt: data.created_at,
        updatedAt: data.updated_at
      };
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.getActivePromptTemplate:', error);
      return null;
    }
  }

  // Fonctions utilitaires priv√©es
  private static async logAdminAction(action: AdminAction): Promise<void> {
    try {
      const { error } = await supabase
        .from('admin_actions')
        .insert(action);

      if (error) {
        console.error('‚ùå Erreur log action admin:', error);
      }
    } catch (error) {
      console.error('‚ùå Erreur AdminSyncService.logAdminAction:', error);
    }
  }

  private static getRoleLevel(role: string): string {
    const roleLevels: Record<string, string> = {
      'admin_org': 'Expert',
      'manager': 'Avanc√©',
      'tech_lead': 'Avanc√©',
      'senior_dev': 'Avanc√©',
      'junior_dev': 'Interm√©diaire',
      'security_expert': 'Expert',
      'security_analyst': 'Avanc√©',
      'user': 'D√©butant'
    };
    return roleLevels[role] || 'D√©butant';
  }

  private static async applyAdminActionToUser(userId: string, action: AdminAction): Promise<void> {
    // Logique pour appliquer les changements admin aux donn√©es utilisateur
    switch (action.type) {
      case 'user_updated':
        // Recharger le profil utilisateur
        break;
      case 'settings_updated':
        // Appliquer les nouveaux param√®tres
        break;
      case 'security_rule_updated':
        // Mettre √† jour les r√®gles de s√©curit√© pour les futures analyses
        break;
      case 'prompt_updated':
        // Mettre √† jour les prompts IA
        break;
      case 'module_created':
      case 'module_updated':
        // Mettre √† jour les modules d'apprentissage
        break;
    }
  }
}